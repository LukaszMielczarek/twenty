version: "3.9"
name: twenty

services:
  change-vol-ownership:
    image: ubuntu
    user: root
    volumes:
      - server-local-data:/tmp/server-local-data
      - docker-data:/tmp/docker-data
    command: >
      bash -c "
      chown -R 1000:1000 /tmp/server-local-data
      && chown -R 1000:1000 /tmp/docker-data"

  server:
    image: twenty-crm:${TAG}
    volumes:
      - server-local-data:/app/packages/twenty-server/${STORAGE_LOCAL_PATH:-.local-storage}
      - docker-data:/app/docker-data
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      PG_DATABASE_URL: postgres://twenty:twenty@${PG_DATABASE_HOST}/default
      SERVER_URL: ${SERVER_URL}
      FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
      MESSAGE_QUEUE_TYPE: ${MESSAGE_QUEUE_TYPE}

      ENABLE_DB_MIGRATIONS: "true"

      SIGN_IN_PREFILLED: ${SIGN_IN_PREFILLED}
      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      LOGIN_TOKEN_SECRET: ${LOGIN_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      FILE_TOKEN_SECRET: ${FILE_TOKEN_SECRET}
    depends_on:
      change-vol-ownership:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3000/healthz
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  worker:
    image: twentycrm/twenty:${TAG}
    command: ["yarn", "worker:prod"]
    environment:
      PG_DATABASE_URL: postgres://twenty:twenty@${PG_DATABASE_HOST}/default
      SERVER_URL: ${SERVER_URL}
      FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
      MESSAGE_QUEUE_TYPE: ${MESSAGE_QUEUE_TYPE}

      ENABLE_DB_MIGRATIONS: "false" # it already runs on the server

      STORAGE_TYPE: ${STORAGE_TYPE}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      LOGIN_TOKEN_SECRET: ${LOGIN_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      FILE_TOKEN_SECRET: ${FILE_TOKEN_SECRET}
    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: always

  db:
    image: twentycrm/twenty-postgres:${TAG}
    container_name: twenty_postgres
    volumes:
      - db-data:/bitnami/postgresql
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
    healthcheck:
      test: pg_isready -U twenty -d default
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    ports:
      - "5432:5432"

volumes:
  docker-data:
  db-data:
  server-local-data:

#version: "3.9"
#name: twenty
#networks:
#  twenty_network:
#    external: true

#services:
#  change-vol-ownership:
#    image: ubuntu
#    user: root
#    volumes:
#      - server-local-data:/tmp/server-local-data
#      - docker-data:/tmp/docker-data
#    command: >
#      bash -c "
#      chown -R 1000:1000 /tmp/server-local-data
#      && chown -R 1000:1000 /tmp/docker-data"
#
#  server:
#    image: twentycrm/twenty:${TAG}
##    network_mode: host
##    networks:
##      - twenty_network
##    extra_hosts:
##      - "host.docker.internal:host-gateway"
#    volumes:
#      - server-local-data:/app/packages/twenty-server/${STORAGE_LOCAL_PATH:-.local-storage}
#      - docker-data:/app/docker-data
#    ports:
#      - "3000:3000"
#    environment:
#      PORT: 3000
#      PG_DATABASE_URL: postgres://twenty:twenty@${PG_DATABASE_HOST}/default
#      SERVER_URL: ${SERVER_URL}
#      FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
#      MESSAGE_QUEUE_TYPE: ${MESSAGE_QUEUE_TYPE}
#
#      ENABLE_DB_MIGRATIONS: "true"
#
#      SIGN_IN_PREFILLED: ${SIGN_IN_PREFILLED}
#      STORAGE_TYPE: ${STORAGE_TYPE}
#      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
#      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
#      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
#      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
#      LOGIN_TOKEN_SECRET: ${LOGIN_TOKEN_SECRET}
#      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
#      FILE_TOKEN_SECRET: ${FILE_TOKEN_SECRET}
#    depends_on:
#      change-vol-ownership:
#        condition: service_completed_successfully
#      db:
#        condition: service_healthy
#    healthcheck:
#      test: curl --fail http://localhost:3000/healthz
#      interval: 5s
#      timeout: 5s
#      retries: 10
#    restart: always
#
#  worker:
#    image: twentycrm/twenty:${TAG}
##    network_mode: host
##    networks:
##      - twenty_network
##    extra_hosts:
##      - "host.docker.internal:host-gateway"
#    command: ["yarn", "worker:prod"]
#    environment:
#      PG_DATABASE_URL: postgres://twenty:twenty@${PG_DATABASE_HOST}/default
#      SERVER_URL: ${SERVER_URL}
#      FRONT_BASE_URL: ${FRONT_BASE_URL:-$SERVER_URL}
#      MESSAGE_QUEUE_TYPE: ${MESSAGE_QUEUE_TYPE}
#
#      ENABLE_DB_MIGRATIONS: "false" # it already runs on the server
#
#      STORAGE_TYPE: ${STORAGE_TYPE}
#      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
#      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
#      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
#      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
#      LOGIN_TOKEN_SECRET: ${LOGIN_TOKEN_SECRET}
#      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
#      FILE_TOKEN_SECRET: ${FILE_TOKEN_SECRET}
#    depends_on:
#      db:
#        condition: service_healthy
#      server:
#        condition: service_healthy
#    restart: always
#
#  db:
#    image: twentycrm/twenty-postgres:${TAG}
##    network_mode: host
##    networks:
##      - twenty_network
##    extra_hosts:
##      - "host.docker.internal:host-gateway"
#    volumes:
#      - db-data:/bitnami/postgresql
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
#    healthcheck:
#      test: pg_isready -U twenty -d default
#      interval: 5s
#      timeout: 5s
#      retries: 10
#    restart: always
#
#volumes:
#  docker-data:
#  db-data:
#  server-local-data:
#
#
#services:
#  twenty-postgres:
#    container_name: twenty_postgres
#    image: twentycrm/twenty-postgres:${TAG}
#    volumes:
#      - twenty_db_data:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_DB=default
#    ports:
#      - "5432:5432"
#volumes:
#  twenty_db_data:
#    name: twenty_db_data

